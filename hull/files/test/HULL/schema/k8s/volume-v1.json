{
  "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
  "properties": {
    "awsElasticBlockStore": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": [
            "string",
            "null"
          ]
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": [
            "boolean",
            "null"
          ]
        },
        "volumeID": {
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "azureDisk": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.",
          "type": [
            "string",
            "null"
          ]
        },
        "diskName": {
          "description": "diskName is the Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "diskURI is the URI of data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": [
            "string",
            "null"
          ]
        },
        "kind": {
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "azureFile": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretName": {
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "shareName is the azure share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "cephfs": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": "array"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": [
            "string",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "user": {
          "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "monitors"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "cinder": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "volumeID": {
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "configMap": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "description": "Maps a string key to a path within a volume.",
            "properties": {
              "key": {
                "description": "key is the key to project.",
                "type": "string"
              },
              "mode": {
                "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                "format": "int32",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "path": {
                "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                "type": "string"
              }
            },
            "required": [
              "key",
              "path"
            ],
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": [
            "string",
            "null"
          ]
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "csi": {
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": [
            "string",
            "null"
          ]
        },
        "nodePublishSecretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "readOnly": {
          "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": [
            "object",
            "null"
          ]
        }
      },
      "required": [
        "driver"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "downwardAPI": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
            "properties": {
              "fieldRef": {
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                  }
                },
                "required": [
                  "fieldPath"
                ],
                "type": [
                  "object",
                  "null"
                ],
                "x-kubernetes-map-type": "atomic",
                "additionalProperties": false
              },
              "mode": {
                "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                "format": "int32",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "path": {
                "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                "type": "string"
              },
              "resourceFieldRef": {
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                "properties": {
                  "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "divisor": {
                    "oneOf": [
                      {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      {
                        "type": [
                          "number",
                          "null"
                        ]
                      }
                    ]
                  },
                  "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                  }
                },
                "required": [
                  "resource"
                ],
                "type": [
                  "object",
                  "null"
                ],
                "x-kubernetes-map-type": "atomic",
                "additionalProperties": false
              }
            },
            "required": [
              "path"
            ],
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "emptyDir": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": [
            "string",
            "null"
          ]
        },
        "sizeLimit": {
          "oneOf": [
            {
              "type": [
                "string",
                "null"
              ]
            },
            {
              "type": [
                "number",
                "null"
              ]
            }
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "ephemeral": {
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "properties": {
        "volumeClaimTemplate": {
          "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
          "properties": {
            "metadata": {
              "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "creationTimestamp": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "deletionGracePeriodSeconds": {
                  "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                  "format": "int64",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "deletionTimestamp": {
                  "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                  "format": "date-time",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "finalizers": {
                  "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "x-kubernetes-patch-strategy": "merge"
                },
                "generateName": {
                  "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "generation": {
                  "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                  "format": "int64",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "labels": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "managedFields": {
                  "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                  "items": {
                    "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                    "properties": {
                      "apiVersion": {
                        "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "fieldsType": {
                        "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "fieldsV1": {
                        "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "manager": {
                        "description": "Manager is an identifier of the workflow managing these fields.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "operation": {
                        "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "subresource": {
                        "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "time": {
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                        "format": "date-time",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "name": {
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "ownerReferences": {
                  "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                  "items": {
                    "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                    "properties": {
                      "apiVersion": {
                        "description": "API version of the referent.",
                        "type": "string"
                      },
                      "blockOwnerDeletion": {
                        "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "controller": {
                        "description": "If true, this reference points to the managing controller.",
                        "type": [
                          "boolean",
                          "null"
                        ]
                      },
                      "kind": {
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                        "type": "string"
                      },
                      "uid": {
                        "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                        "type": "string"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "kind",
                      "name",
                      "uid"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "x-kubernetes-map-type": "atomic",
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ],
                  "x-kubernetes-patch-merge-key": "uid",
                  "x-kubernetes-patch-strategy": "merge"
                },
                "resourceVersion": {
                  "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "selfLink": {
                  "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "uid": {
                  "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "spec": {
              "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
              "properties": {
                "accessModes": {
                  "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "dataSource": {
                  "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
                  "properties": {
                    "apiGroup": {
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind is the type of resource being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of resource being referenced",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ],
                  "type": [
                    "object",
                    "null"
                  ],
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "dataSourceRef": {
                  "properties": {
                    "apiGroup": {
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind is the type of resource being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of resource being referenced",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ],
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "resources": {
                  "description": "VolumeResourceRequirements describes the storage resource requirements for a volume.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          {
                            "type": [
                              "number",
                              "null"
                            ]
                          }
                        ]
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "oneOf": [
                          {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          {
                            "type": [
                              "number",
                              "null"
                            ]
                          }
                        ]
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "selector": {
                  "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          }
                        },
                        "required": [
                          "key",
                          "operator"
                        ],
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": false
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "matchLabels": {
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "storageClassName": {
                  "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "volumeAttributesClassName": {
                  "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "volumeMode": {
                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "volumeName": {
                  "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "spec"
          ],
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": false
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "fc": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": [
            "string",
            "null"
          ]
        },
        "lun": {
          "description": "lun is Optional: FC target lun number",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "targetWWNs": {
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": [
            "array",
            "null"
          ]
        },
        "wwids": {
          "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "flexVolume": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": [
            "string",
            "null"
          ]
        },
        "options": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": [
            "object",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        }
      },
      "required": [
        "driver"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "flocker": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
          "type": [
            "string",
            "null"
          ]
        },
        "datasetUUID": {
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "gcePersistentDisk": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": [
            "string",
            "null"
          ]
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "pdName": {
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "required": [
        "pdName"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "gitRepo": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": [
            "string",
            "null"
          ]
        },
        "repository": {
          "description": "repository is the URL",
          "type": "string"
        },
        "revision": {
          "description": "revision is the commit hash for the specified revision.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "repository"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "glusterfs": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "hostPath": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "path"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "iscsi": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": [
            "boolean",
            "null"
          ]
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": [
            "boolean",
            "null"
          ]
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": [
            "string",
            "null"
          ]
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": [
            "string",
            "null"
          ]
        },
        "iqn": {
          "description": "iqn is the target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": [
            "string",
            "null"
          ]
        },
        "lun": {
          "description": "lun represents iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": [
            "array",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "targetPortal": {
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "name": {
      "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
      "type": [
        "string",
        "null"
      ]
    },
    "nfs": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": [
            "boolean",
            "null"
          ]
        },
        "server": {
          "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "persistentVolumeClaim": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "required": [
        "claimName"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "photonPersistentDisk": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": [
            "string",
            "null"
          ]
        },
        "pdID": {
          "description": "pdID is the ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "portworxVolume": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "properties": {
        "fsType": {
          "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "volumeID": {
          "description": "volumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "projected": {
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "sources": {
          "description": "sources is the list of volume projections",
          "items": {
            "description": "Projection that may be projected along with other supported volume types",
            "properties": {
              "clusterTrustBundle": {
                "description": "ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.",
                "properties": {
                  "labelSelector": {
                    "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ],
                    "x-kubernetes-map-type": "atomic",
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "optional": {
                    "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "path": {
                    "description": "Relative path from the volume root to write the bundle.",
                    "type": "string"
                  },
                  "signerName": {
                    "description": "Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "path"
                ],
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false
              },
              "configMap": {
                "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
                "properties": {
                  "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                      "description": "Maps a string key to a path within a volume.",
                      "properties": {
                        "key": {
                          "description": "key is the key to project.",
                          "type": "string"
                        },
                        "mode": {
                          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                          "format": "int32",
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "path": {
                          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "path"
                      ],
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false
              },
              "downwardAPI": {
                "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
                "properties": {
                  "items": {
                    "description": "Items is a list of DownwardAPIVolume file",
                    "items": {
                      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                      "properties": {
                        "fieldRef": {
                          "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "fieldPath": {
                              "description": "Path of the field to select in the specified API version.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "fieldPath"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "x-kubernetes-map-type": "atomic",
                          "additionalProperties": false
                        },
                        "mode": {
                          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                          "format": "int32",
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "path": {
                          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                          "type": "string"
                        },
                        "resourceFieldRef": {
                          "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                          "properties": {
                            "containerName": {
                              "description": "Container name: required for volumes, optional for env vars",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "divisor": {
                              "oneOf": [
                                {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                {
                                  "type": [
                                    "number",
                                    "null"
                                  ]
                                }
                              ]
                            },
                            "resource": {
                              "description": "Required: resource to select",
                              "type": "string"
                            }
                          },
                          "required": [
                            "resource"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "x-kubernetes-map-type": "atomic",
                          "additionalProperties": false
                        }
                      },
                      "required": [
                        "path"
                      ],
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  }
                },
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false
              },
              "secret": {
                "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
                "properties": {
                  "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                      "description": "Maps a string key to a path within a volume.",
                      "properties": {
                        "key": {
                          "description": "key is the key to project.",
                          "type": "string"
                        },
                        "mode": {
                          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                          "format": "int32",
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "path": {
                          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "path"
                      ],
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  },
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "optional": {
                    "description": "optional field specify whether the Secret or its key must be defined",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false
              },
              "serviceAccountToken": {
                "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
                "properties": {
                  "audience": {
                    "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                    "format": "int64",
                    "type": [
                      "integer",
                      "null"
                    ]
                  },
                  "path": {
                    "description": "path is the path relative to the mount point of the file to project the token into.",
                    "type": "string"
                  }
                },
                "required": [
                  "path"
                ],
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false
              }
            },
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "quobyte": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "group to map volume access to Default is no group",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "registry": {
          "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": [
            "string",
            "null"
          ]
        },
        "user": {
          "description": "user to map volume access to Defaults to serivceaccount user",
          "type": [
            "string",
            "null"
          ]
        },
        "volume": {
          "description": "volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "rbd": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": [
            "string",
            "null"
          ]
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": "array"
        },
        "pool": {
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "user": {
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "scaleIO": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway": {
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "sslEnabled": {
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
          "type": [
            "boolean",
            "null"
          ]
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": [
            "string",
            "null"
          ]
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": [
            "string",
            "null"
          ]
        },
        "system": {
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "secret": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": [
            "integer",
            "null"
          ]
        },
        "items": {
          "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "description": "Maps a string key to a path within a volume.",
            "properties": {
              "key": {
                "description": "key is the key to project.",
                "type": "string"
              },
              "mode": {
                "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                "format": "int32",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "path": {
                "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                "type": "string"
              }
            },
            "required": [
              "key",
              "path"
            ],
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        },
        "optional": {
          "description": "optional field specify whether the Secret or its keys must be defined",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretName": {
          "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "storageos": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": [
            "string",
            "null"
          ]
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "secretRef": {
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ],
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": [
            "string",
            "null"
          ]
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "vsphereVolume": {
      "description": "Represents a vSphere volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": [
            "string",
            "null"
          ]
        },
        "storagePolicyID": {
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": [
            "string",
            "null"
          ]
        },
        "storagePolicyName": {
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
          "type": [
            "string",
            "null"
          ]
        },
        "volumePath": {
          "description": "volumePath is the path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "name"
  ],
  "type": "object",
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}