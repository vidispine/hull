global:
  keycloak_registry: "cr.vidinet.net"

hull:
  config:
    general:
      data:
        endpoints:
          postgres:
            uri:
              address: ""
            auth:
              basic:
                adminUsername: ""
                adminPassword: ""
                usernamesPostfix: ""
            options:
              timeout: 30
          vidicore:
            uri:
              api: ''
            auth:
              basic:
                adminUserSecretName: _HT/hull.vidispine.addon.library.secret.name.vidispine.admin.user
          authservice:
            uri:
              api: ""
              authserviceInternal: |-
                _HT!
                  http://{{- printf "%s-authservice" _HT**Release.Name | trunc 23 -}}:8745/auth
              keycloak: ""
              keycloakInternal: |-
                _HT!
                  http://{{- printf "%s-keycloak" _HT**Release.Name | trunc 20 -}}:80/auth
            auth:
              token:
                installationClientId: ""
                installationClientSecret: ""
                productClientId: ""
                productClientSecret: ""
          configportal:
            uri:
              api: ""
              apiInternal: ""
        config:
            productUris: _HT!
              [
                {{- _HT*hull.config.general.data.endpoints.authservice.uri.api -}}
              ]

    specific:
      allowOrigins: []
      # Configure authservice ingress
      ingress:
        # Connect ingress to controller via IngressClass
        controllerClass: haproxy-ingress.github.io/controller
      logging:
        loglevel:
          Default: Debug
      images:
        dbTools: 
          repository: vpms/dbtools
          tag: "1.8"
      components:
        authservice:
          custom:
            enableCRONJobSync: true
            enableAuthServiceLdap: true
            enableVidicoreIdProvider: false
            fullSyncPeriodSeconds: "86400"
            changedSyncPeriodSeconds: "-1"
            syncUserToVidicoreMaxThreads: 1
          mounts:
            secret:
              appsettings.json:
                Vpms3Logging:
                  Options: "console"
                  LogLevel: _HT*hull.config.specific.logging.loglevel
                Server:
                  Uri: |- 
                    _HT!
                      {{- $uri := (urlParse _HT*hull.config.general.data.endpoints.authservice.uri.api) -}}
                      {{- printf "%s%s" $uri.host $uri.path -}}
                  UseSsl: _HT?(eq (urlParse _HT*hull.config.general.data.endpoints.authservice.uri.api).scheme "https")
                Keycloak:
                  InternalEndpoint: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"keycloak":INFO:"base"
                  InternalEndpointPath: auth
                  ExternalEndpoint: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"keycloak":INFO:"base":IGNORE_INTERNAL:true
                  ExternalEndpointPath: auth
                  Realm:
                    Master:
                      AdminUserFilePath: /etc/secrets/keycloak/KEYCLOAK_ADMIN
                      AdminPasswordFilePath: /etc/secrets/keycloak/KEYCLOAK_ADMIN_PASSWORD
                    Vidispine:
                      AdminUserFilePath: /etc/secrets/keycloak/VIDISPINE_REALM_ADMIN
                      AdminPasswordFilePath: /etc/secrets/keycloak/VIDISPINE_REALM_ADMIN_PASSWORD
                  Client: 
                    InstallerClient: 
                      ClientIdFilePath: /etc/secrets/auth/CLIENT_AUTHSERVICE_ID
                      ClientSecretFilePath: /etc/secrets/auth/CLIENT_AUTHSERVICE_SECRET
                Vidispine:
                  EnableAuthServiceLdap: _HT*hull.config.specific.components.authservice.custom.enableAuthServiceLdap
                  EnableVidicoreIdProvider: _HT*hull.config.specific.components.authservice.custom.enableVidicoreIdProvider
                  Endpoint: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"vidicore"
                  FullSyncPeriod: "86400"
                  ChangedSyncPeriod: "-1"
                  SyncTimeout: 1800
                  SyncUserToVidiCoreMaxThreads: _HT*hull.config.specific.components.authservice.custom.syncUserToVidicoreMaxThreads
                  User: 
                    AdminServiceUserFilePath: "/etc/secrets/vidispine-admin-service-user/username"
                    AdminServicePasswordFilePath: "/etc/secrets/vidispine-admin-service-user/password"
                Certificates:
                  Ssl: null
                  TokenSigning: null
                  TokenValidation: null
                Proxy:
                  Uri: auth
                AllowedOrigins: |-
                  _HT!
                    [
                      {{ if (kindIs "string" _HT*hull.config.specific.allowOrigins) }}
                      "{{ _HT*hull.config.specific.allowOrigins }}"
                      {{ else }}
                      {{ range $origin := _HT*hull.config.specific.allowOrigins }}
                      "{{ $origin | trim }}",
                      {{ end }}
                      {{ end }}
                    ]
          auth:
            clientId: ""
            clientSecret: ""
          database:
            name: auth
            username: ""
            password: ""
          extraVolumes:
            keycloak-user:
              secret:
                secretName: keycloak-user
                defaultMode: 420
            vidispine-service-admin-user:
              secret:
                secretName: _HT*hull.config.general.data.endpoints.vidicore.auth.basic.adminUserSecretName
                staticName: true
                defaultMode: 420
                optional: true
            auth:
              secret:
                secretName: auth
                defaultMode: 420
        validate-password-policy: {}
          
  objects:

    serviceaccount:
      
      authservice-create-db:
        sources: 
        - hull-database
      
      authservice-reset-db:
        sources: 
        - hull-database
      
      validate-password-policy:
        annotations:
          "helm.sh/hook": pre-install,pre-upgrade
          "helm.sh/hook-weight": "-90"
          "helm.sh/hook-delete-policy": before-hook-creation

    registry:
      
      _HULL_OBJECT_TYPE_DEFAULT_:
        annotations:
          "helm.sh/hook": pre-install,pre-upgrade
          "helm.sh/hook-weight": "-90"
          "helm.sh/hook-delete-policy": before-hook-creation

    service:
      
      authservice:
        enabled: true
        type: ClusterIP
        ports:
          http:
            port: 8745
            targetPort: 8745
            #nodePort: 31745

    secret:

      auth:
        sources:
        - hull-database
        data: _HT/hull.vidispine.addon.library.auth.secret.data:ENDPOINTS:"database,vidicore,authservice,rabbitmq,gitrepository"

      authservice:
        sources:
        - hull-database
        data: _HT/hull.vidispine.addon.library.component.secret.data:COMPONENT:(index . "OBJECT_INSTANCE_KEY")

      shared-cert:
        staticName: true
        data: {}

      keycloak-user:
        annotations:
          "helm.sh/hook": pre-install,pre-upgrade
          "helm.sh/hook-weight": "-90"
          "helm.sh/hook-delete-policy": before-hook-creation
        data:
          # Needs this name for keycloak to accept it
          KEYCLOAK_ADMIN:
            inline: "admin"
          KEYCLOAK_ADMIN_PASSWORD:
            inline: ""
          KEYCLOAK_MANAGEMENT_USER:
            inline: "manager"
          KEYCLOAK_MANAGEMENT_PASSWORD:
            inline: ""
          VIDISPINE_REALM_ADMIN:
            inline: "admin"
          VIDISPINE_REALM_ADMIN_PASSWORD:
            inline: ""

    configmap:
      
      _HULL_OBJECT_TYPE_DEFAULT_:
        annotations:
          helm.sh/hook: pre-install,pre-upgrade
          helm.sh/hook-delete-policy: before-hook-creation
          helm.sh/hook-weight: "-80"
      
      authservice:
        data: _HT/hull.vidispine.addon.library.component.configmap.data:COMPONENT:(index . "OBJECT_INSTANCE_KEY")

      validate-password-policy:
        annotations:
          helm.sh/hook-weight: "-90"
        data: _HT/hull.vidispine.addon.library.component.configmap.data:COMPONENT:(index . "OBJECT_INSTANCE_KEY")
      
      custom-db-scripts:
        data:
          create-database.sh: 
            inline: |-
              #!/bin/sh
              if [ -z "${DBADMINUSER}" ]; then
                echo "Database admin user is not configured. Database creation will be skipped."
                exit 0
              fi

              case "${DBTYPE}" in 
                mssql)
                  DBEXISTS=$(/opt/mssql-tools/bin/sqlcmd -U ${DBUSER} -P ${DBPASSWORD} -S ${DBHOST},${DBPORT} -d ${DBNAME} -l 120 -Q 'SELECT 1;')
                  if [ "$DBEXISTS" ]; then
                    echo "database [${DBNAME}] is already accessible by user [${DBUSER}]. No database setup is needed."
                  else
                    echo "database [${DBNAME}] is not accessible by user [${DBUSER}]. Database setup is needed."

                    /opt/mssql-tools/bin/sqlcmd -U ${DBADMINUSER} -P ${DBADMINPASSWORD} -S ${DBHOST},${DBPORT} -d master -l 120 -b -i /scripts/create-database.sql
                    /opt/mssql-tools/bin/sqlcmd -U ${DBADMINUSER} -P ${DBADMINPASSWORD} -S ${DBHOST},${DBPORT} -d ${DBNAME} -l 120 -b -i /scripts/set-permission.sql
                  fi
                  ;;
                postgres)
                  export PGPASSWORD=${DBPASSWORD}
                  DBEXISTS=$(psql -h ${DBHOST} -p ${DBPORT} -U ${DBUSER}${DBUSERPOSTFIX} -d ${DBNAME} -tAc "SELECT 1;")
                  
                  export PGPASSWORD=${DBADMINPASSWORD}
                  if [ "$DBEXISTS" ]; then
                    echo "database [${DBNAME}] is already accessible by user [${DBUSER}]. No database setup is needed."
                  else
                    echo "database [${DBNAME}] is not accessible by user [${DBUSER}]. Database setup is needed."

                    if [ $(psql -h ${DBHOST} -p ${DBPORT} -U ${DBADMINUSER}${DBUSERPOSTFIX} -d postgres -tAc "SELECT 1 FROM pg_user WHERE lower(usename)='${DBUSER}';") ]; then
                      echo "user ${DBUSER} already exists"
                    else
                      echo "creating user ${DBUSER}"
                      psql -h ${DBHOST} -p ${DBPORT} -U ${DBADMINUSER}${DBUSERPOSTFIX} -d postgres -c "CREATE USER ${DBUSER} PASSWORD '${DBPASSWORD}';"
                      echo "granting role ${DBUSER} to admin user"
                      psql -h ${DBHOST} -p ${DBPORT} -U ${DBADMINUSER}${DBUSERPOSTFIX} -d postgres -c "GRANT ${DBUSER} to ${DBADMINUSER};"
                    fi
                    if [ $(psql -h ${DBHOST} -p ${DBPORT} -U ${DBADMINUSER}${DBUSERPOSTFIX} -d postgres -tAc "SELECT 1 FROM pg_database WHERE lower(datname)='${DBNAME}';") ]; then
                      echo "database ${DBNAME} already exists"
                    else
                      echo "creating database ${DBNAME}"
                      psql -h ${DBHOST} -p ${DBPORT} -U ${DBADMINUSER}${DBUSERPOSTFIX} -d postgres -c "CREATE DATABASE ${DBNAME} OWNER ${DBUSER};"
                      echo "Setup database extension"
                      psql -h ${DBHOST} -p ${DBPORT} -U ${DBADMINUSER}${DBUSERPOSTFIX} -d ${DBNAME} -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

                    fi
                  fi
                  ;;
                *)
                  echo "unsupported database type ${DBTYPE}"
                  exit 1
              esac

    # Configure authservice
    deployment:

      authservice:
        enabled: true
        replicas: 1
        pod:
          initContainers:
            01-check-keycloak-ready:
              image:
                repository: _HT*hull.config.specific.images.dbTools.repository
                tag: _HT!* _HT*hull.config.specific.images.dbTools.tag | toString | quote
              command:
              - 'sh'
              - '-c'
              - '/scripts/check-keycloak-ready.sh'
              volumeMounts:
                scripts:
                  name: configmap
                  mountPath: /scripts
                  hashsumAnnotation: true
                _HT!:
                  _: |-
                    {
                      {{ range $certkey, $certvalue := _HT*hull.config.general.data.installation.config.customCaCertificates}}
                      "custom-ca-certificates-{{ $certkey }}": 
                        {
                          enabled: true, 
                          name: "certs",
                          mountPath: "/usr/local/share/ca-certificates/custom-ca-certificates-{{ $certkey }}",
                          subPath: "{{ $certkey }}",
                          hashsumAnnotation: true
                        },
                      {{ end }}
                    }
                etcssl:
                  enabled: _HT?_HT*hull.config.general.data.installation.config.customCaCertificates
                  name: etcssl
                  mountPath: /etc/ssl/certs
          containers:
            authservice:
              image:
                repository: auth/authservicekeycloak
                tag: _HT!* _HT*Chart.Version | quote | toString
              ports:
                http:
                  containerPort: 8745
                  protocol: TCP
              resources:
                limits:
                  cpu: 250m
                  memory: 512Mi
                requests:
                  cpu: 100m
                  memory: 256Mi
              livenessProbe:
                failureThreshold: 15
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 20
              readinessProbe:
                failureThreshold: 15
                httpGet:
                  path: /healthz
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 20
              command:
                - 'tini'
              args:
                - "/bin/sh"
                - "/app/entrypoint.sh"
              env: _HT/hull.vidispine.addon.library.component.pod.env:COMPONENT:"authservice"
              volumeMounts:
                settings:
                  name: secret
                  mountPath: /app/appsettings.json
                  subPath: appsettings.json
                  hashsumAnnotation: true
                entrypoint:
                  name: configmap
                  mountPath: /app/entrypoint.sh
                  subPath: entrypoint.sh
                  hashsumAnnotation: true
                script:
                  name: configmap
                  mountPath: /script
                  hashsumAnnotation: true
                keycloak-user:
                  name: keycloak-user
                  mountPath: /etc/secrets/keycloak
                  hashsumAnnotation: true
                authservice:
                  name: secret
                  mountPath: /etc/secrets/authservice
                  hashsumAnnotation: true
                auth:
                  name: auth
                  mountPath: /etc/secrets/auth
                  hashsumAnnotation: true
                vidispine-service-admin-user:
                  name: vidispine-service-admin-user
                  mountPath: /etc/secrets/vidispine-admin-service-user
                etcssl:
                  enabled: _HT?_HT*hull.config.general.data.installation.config.customCaCertificates
                  name: etcssl
                  mountPath: /etc/ssl/certs
                _HULL_TRANSFORMATION_:
                  NAME: hull.util.transformation.tpl
                  CONTENT: |-
                    {
                      {{ range $certkey, $certvalue := _HT*hull.config.general.data.installation.config.customCaCertificates}}
                      "custom-ca-certificates-{{ $certkey }}": 
                        {
                          enabled: true, 
                          name: "certs",
                          mountPath: "/usr/local/share/ca-certificates/custom-ca-certificates-{{ $certkey }}",
                          subPath: "{{ $certkey }}",
                          hashsumAnnotation: true
                        },
                      {{ end }}
                    }
          volumes: _HT/hull.vidispine.addon.library.component.pod.volumes:COMPONENT:(index . "OBJECT_INSTANCE_KEY")
    
    # Configure authservice ingress
    ingressclass:
      
      default:
        controller: _HT*hull.config.specific.ingress.controllerClass

    ingress:
      _HULL_OBJECT_TYPE_DEFAULT_:
        ingressClassName: _HT^default
      
      authservice:
        annotations:
          haproxy-ingress.github.io/path-type: regex
        enabled: true
        rules:
          authservice:
            host: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":INFO:"hostname"
            http:
              paths:
                application:
                  path: _HT!{{ printf "%s(/|/$|$|/assets|/swagger|/health|/healthz)(.*|$)" (include "hull.vidispine.addon.library.get.endpoint.uri.info" (dict "PARENT_CONTEXT" (index . "$") "ENDPOINT" "authservice" "INFO" "path")) }}
                  pathType: _HT!
                            {{- if contains "haproxy-ingress.github.io/controller" _HT*hull.config.specific.ingress.controllerClass -}}
                            ImplementationSpecific
                            {{- else -}}
                            Exact
                            {{- end -}}
                  backend:
                    service:
                      name: authservice
                      port:
                        name: http
                api:
                  path: _HT!{{ printf "%s(/([a-zA-Z0-9_])*)(/v([0-9])+/|((?![#=?!]).)*/v([0-9])+/.*)" (include "hull.vidispine.addon.library.get.endpoint.uri.info" (dict "PARENT_CONTEXT" (index . "$") "ENDPOINT" "authservice" "INFO" "path")) }}
                  pathType: _HT!
                            {{- if contains "haproxy-ingress.github.io/controller" _HT*hull.config.specific.ingress.controllerClass -}}
                            ImplementationSpecific
                            {{- else -}}
                            Exact
                            {{- end -}}
                  backend:
                    service:
                      name: authservice
                      port:
                        name: http
                proxy:
                  path: _HT!{{ printf "%s/realms(/[a-zA-Z0-9_]*)(/connect+/.*)" (include "hull.vidispine.addon.library.get.endpoint.uri.info" (dict "PARENT_CONTEXT" (index . "$") "ENDPOINT" "authservice" "INFO" "path")) }}
                  pathType: _HT!
                            {{- if contains "haproxy-ingress.github.io/controller" _HT*hull.config.specific.ingress.controllerClass -}}
                            ImplementationSpecific
                            {{- else -}}
                            Exact
                            {{- end -}}
                  backend:
                    service:
                      name: authservice
                      port:
                        name: http
      
      keycloak:
        annotations:
          haproxy-ingress.github.io/path-type: regex
        rules:
          keycloak:
            host:  _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"keycloak":INFO:"hostname":IGNORE_INTERNAL:true
            http:
              paths:
                application:
                  path: _HT!{{ printf "%s/(admin|resources|js|realms)(($|(?!/((v[0-9]+)|connect)/).)*$)" (include "hull.vidispine.addon.library.get.endpoint.uri.info" (dict "PARENT_CONTEXT" (index . "$") "ENDPOINT" "authservice" "IGNORE_INTERNAL" true "INFO" "path")) }}
                  pathType: _HT!
                            {{- if contains "haproxy-ingress.github.io/controller" _HT*hull.config.specific.ingress.controllerClass -}}
                            ImplementationSpecific
                            {{- else -}}
                            Exact
                            {{- end -}}
                  backend:
                    service:
                      staticName: true
                      name: _HT!* printf "%s-keycloak" _HT**Release.Name
                      port: 
                        name: http

    job:
      
      _HULL_OBJECT_TYPE_DEFAULT_:
        pod:
          restartPolicy: Never
        backoffLimit: 4
      
      authservice-create-db:
        sources:
        - hull-database
        pod: _HT/hull.vidispine.addon.library.component.job.database:COMPONENT:"authservice":TYPE:"create":CREATE_SCRIPT_CONFIGMAP:"custom-db-scripts"
      
      authservice-reset-db:
        enabled: false
        sources:
        - hull-database
        pod: _HT/hull.vidispine.addon.library.component.job.database:COMPONENT:"authservice":TYPE:"reset"
        
      validate-password-policy:
        enabled: true
        annotations:
          "helm.sh/hook": pre-install,pre-upgrade
          "helm.sh/hook-weight": "-80"
        pod:
          serviceAccountName: _HT^validate-password-policy
          restartPolicy: OnFailure
          containers:
            validate-password-policy:
              image:
                repository: vpms/powershellcore-yaml
                tag: "7.0.3-ubuntu-18.04-20200928"
              command:
                - pwsh
                - -c
                - /script/check-password.ps1
                - "-Passwords @(\"$(VIDISPINE_REALM_ADMIN_PASSWORD)\")"
              env:
                VIDISPINE_REALM_ADMIN_PASSWORD:
                  valueFrom:
                    secretKeyRef:
                      name: keycloak-user
                      key: VIDISPINE_REALM_ADMIN_PASSWORD
              volumeMounts:
                script:
                  enabled: true
                  name: configmap
                  mountPath: '/script'
          volumes: _HT/hull.vidispine.addon.library.component.pod.volumes:COMPONENT:(index . "OBJECT_INSTANCE_KEY")

    cronjob:
      
      check-ldap-sync: 
        enabled: _HT*hull.config.specific.components.authservice.custom.enableCRONJobSync
        schedule: "* * * * *"
        failedJobsHistoryLimit: 2
        successfulJobsHistoryLimit: 2
        concurrencyPolicy: Forbid
        job:
          pod:
            restartPolicy: Never
            containers:
              ldap-sync:
                image:
                  repository: vpms/powershellcore-yaml-oras
                  tag: 7.3-ubuntu-22.04-20230620
                command: ["/bin/sh", "-c"]
                args: [
                  "pwsh /script/syncscheduler.ps1;"
                  ]
                env:
                  'AUTHSERVICE_URL':
                    value: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"authservice"
                  'AUTHSERVICE_KEYCLOAK_URL':
                    value: _HT/hull.vidispine.addon.library.get.endpoint.uri.info:ENDPOINT:"authservice":URI:"keycloak"
                  'AUTHSERVICE_TOKEN_INSTALLER_CLIENT_ID':
                    valueFrom:
                      secretKeyRef:
                        name: auth
                        key: AUTH_TOKEN_AUTHSERVICE_INSTALLATIONCLIENTID
                  'AUTHSERVICE_TOKEN_INSTALLER_CLIENT_SECRET':
                    valueFrom:
                      secretKeyRef:
                        name: auth
                        key:  AUTH_TOKEN_AUTHSERVICE_INSTALLATIONCLIENTSECRET
                volumeMounts:
                  script:
                    name: configmap
                    mountPath: '/script'
            volumes: _HT/hull.vidispine.addon.library.component.pod.volumes:COMPONENT:"authservice"

keycloak:
  image:
    registry: "cr.vidinet.net"
    repository: vidiconfig/bitnami-keycloak
    tag: 22.0.5
  global:
    imagePullSecrets:
      - vpms3
  initContainers:
    - name: provider-install
      image: '{{ .Values.global.keycloak_registry }}/auth/authservicekeycloak/provider:24.2.7'
      command: ['/bin/sh']
      args: ['-c', 'cp -f /artifacts/*.jar /provider']
      volumeMounts:
        - name: provider
          mountPath: '/provider'
    - name: etcssl
      image: '{{ .Values.global.keycloak_registry }}/prepared/ca-cert-java:0.2'
      command:
      - /bin/bash
      - '-ec'
      - |-
        mkdir -p /etc/ssl/certs/java && update-ca-certificates -f &&
        /var/lib/dpkg/info/ca-certificates-java.postinst configure
      volumeMounts:
      - name: certs
        mountPath: /usr/local/share/ca-certificates/
      - name: etcssl
        mountPath: /etc/ssl/certs
  extraVolumes:
    - name: provider
      emptyDir: {}
    - name: script
      configMap: 
        name: authservice-authservice
    - name: keytab
      secret:
        secretName: authservice-keycloak-keytab
        defaultMode: 420
        optional: true
  extraVolumeMounts:
    - name: provider
      mountPath: '/provider'
    - name: script
      mountPath: '/docker-entrypoint-initdb.d/copy-providers.sh'
      subPath: copy-providers.sh
    - name: keytab
      mountPath: /keytab
  auth:
    createAdminUser: true
    adminUser: "admin"
    adminPassword: ""
    managementUser: "manager"
    managementPassword: ""
    tls:
      enabled: false
      autoGenerated: true
  proxyAddressForwarding: true
  # To set the KEYCLOAK_ADMIN username
  extraEnvVarsSecret: authservice-keycloak-user
  #https://www.keycloak.org/docs/latest/server_installation/index.html#default-provider (since the bitnami chart param does not work)
  extraEnvVars:
    ## ref: https://keycloak.discourse.group/t/keycloak-10-0-x-and-11-0-0-fails-to-connect-to-the-database/3917/2
    - name: JDBC_PARAMS
      value: 'useSSL=false'
      ## ref: https://keycloak.discourse.group/t/enable-preview-features-in-docker-container/6918
    - name: JAVA_OPTS
      value: >-
        -Dkeycloak.profile=community
        -Dkeycloak.profile.feature.admin_fine_grained_authz=enabled
        -Dkeycloak.profile.feature.admin2=disabled
        -Dkeycloak.profile.feature.client_secret_rotation=enabled
        -Dkeycloak.profile.feature.declarative_user_profile=enabled
        -Dkeycloak.profile.feature.docker=enabled
        -Dkeycloak.profile.feature.openshift_integration=enabled
        -Dkeycloak.profile.feature.recovery_codes=enabled
        -Dkeycloak.profile.feature.scripts=enabled
        -Dkeycloak.profile.feature.token_exchange=enabled
    - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
      value: 'true'
    - name: KEYCLOAK_HTTP_RELATIVE_PATH
      value: '/auth'
    - name: KEYCLOAK_LOG_OUTPUT
      value: 'json'
    #- name: KEYCLOAK_LOG_LEVEL
    #  value: INFO
    - name: QUARKUS_TRANSACTION_MANAGER_DEFAULT_TRANSACTION_TIMEOUT
      value: '1800S'
    - name: HTTP_CLIENT_TIMEOUT_IN_SECONDS
      value: '900'
  postgresql:
    enabled: false
  externalDatabase:
    existingSecret: authservice-authservice-authservice
    existingSecretPasswordKey: AUTH_BASIC_DATABASE_PASSWORD
  service:
    type: ClusterIP
  readinessProbe:
    enabled: false
  customLivenessProbe:
    httpGet:
      path: /auth
      port: http
    timeoutSeconds: 30
    periodSeconds: 120
    successThreshold: 1
  livenessProbe:
    enabled: false
  customReadinessProbe:
    httpGet:
      path: /auth/realms/master
      port: http
    timeoutSeconds: 30
    periodSeconds: 120
    successThreshold: 1
  logging:
    output: json
  metrics:
    enabled: true
  cache:
    enabled: true
  replicaCount: 1
  podManagementPolicy: OrderedReady