# Default values for MediaLogger.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# - provides default values where applicable

# Configuration of chart should be done via the hull chart
hull:
  config:
    general:
      data:
        endpoints:
          authservice:
            uri:
              api: ""
            auth:
              token:
                installationClientId: ""
                installationClientSecret: ""
                productClientId: ""
                productClientSecret: ""
          configportal:
            uri:
              api: ""
              apiInternal: ""
            auth:
              token:
                installationClientId: ""
                installationClientSecret: ""
          vidicore:
            uri:
              api: ""
              apinoauth: ""
              apiInternal: ""
              apinoauthInternal: ""
            auth:
              basic:
                adminUserSecretName: _HT/hull.vidispine.addon.library.secret.name.vidispine.admin.user
          vidistream:
            uri:
              httpStream: ''
              httpRender: ''
              httpTrickPlay: ''
          medialogger:
            uri:
              ui: ''

        installation:
          config:
            productUris: _HT! [ {{- (index . "$").Values.hull.config.general.data.endpoints.medialogger.uri.ui -}} ]

          endpoints:
            30_configportal:
              auth:
                token:
                  scopes:
                  - 'configportalscope'
                  - 'identityscope'


    specific:
      ingress:
        # Connect ingress to controller via IngressClass
        controllerClass: haproxy-ingress.github.io/controller
      components:
        medialogger: {}
        medialogger-frontend:
          auth:
            clientId:
            clientSecret:
        medialogger-backend:
          auth:
            clientId:
            clientSecret:
        medialogger-swagger:
          auth:
            clientId:
            clientSecret:

  objects:
    # Define all services to be created
    service:
      _HULL_OBJECT_TYPE_DEFAULT_:
        type: ClusterIP
      medialogger:
        ports:
          http:
            port: 80

    # - this block is created for deployment objects if at least one deployment exists
    deployment:
      _HULL_OBJECT_TYPE_DEFAULT_:
        pod:
          containers:
            _HULL_OBJECT_TYPE_DEFAULT_:
              volumeMounts:
                etcssl:
                  enabled: _HT?(index . "$").Values.hull.config.general.data.installation.config.customCaCertificates
                  name: etcssl
                  mountPath: '/etc/ssl/certs'
                _HULL_TRANSFORMATION_:
                  NAME: hull.util.transformation.tpl
                  CONTENT: |-
                    {
                      {{ range $certkey, $certvalue := (index . "$").Values.hull.config.general.data.installation.config.customCaCertificates}}
                      "custom-ca-certificates-{{ $certkey }}":
                        {
                          enabled: true,
                          name: "certs",
                          mountPath: "/usr/local/share/ca-certificates/custom-ca-certificates-{{ $certkey }}",
                          subPath: "{{ $certkey }}",
                          hashsumAnnotation: true

                        },
                      {{ end }}
                    }

      medialogger:
        pod:
          containers:
            medialogger:
              image:
                registry: vpms3.azurecr.io
                repository: medialogger/medialogger
                tag: ''
              env:
                REACT_APP_CONFIGPORTAL_ROOT:
                  value: _HT!{{ trimSuffix "/" (trimSuffix "/v2" (index . "$").Values.hull.config.general.data.endpoints.configportal.uri.api) }}
                REACT_APP_AUTH_SERVICE_ROOT:
                  value: _HT*hull.config.general.data.endpoints.authservice.uri.api
                REACT_APP_AUTH_SERVICE_CLIENT_ID:
                  valueFrom:
                    secretKeyRef:
                      name: "auth"
                      key: "CLIENT_MEDIALOGGER_FRONTEND_ID"
                REACT_APP_VIDISPINE_URL:
                  value: _HT*hull.config.general.data.endpoints.vidicore.uri.api
              ports:
                http:
                  containerPort: 80
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /api/Status/ping
                  port: http
                periodSeconds: 30
              readinessProbe:
                httpGet:
                  path: /api/Status/ping
                  port: http
              resources:
                limits:
                  cpu: 2000m
                  memory: 2Gi
                requests:
                  cpu: 1000m
                  memory: 1Gi
          volumes: _HT/hull.vidispine.addon.library.component.pod.volumes:COMPONENT:(index . "OBJECT_INSTANCE_KEY")

    ingressclass:
      medialogger:
        controller: _HT*hull.config.specific.ingress.controllerClass

    ingress:
      _HULL_OBJECT_TYPE_DEFAULT_:
        ingressClassName: _HT^medialogger
      medialogger:
        rules: _HT/hull.vidispine.addon.library.component.ingress.rules:ENDPOINT:"medialogger":COMPONENTS:"ui":SERVICENAME:(index . "OBJECT_INSTANCE_KEY")
